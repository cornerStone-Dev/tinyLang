// tinyTest.tiny

s64 fib(s64 n)
{
	if (n < 2)
	{
		return n;
	} else {
		return fib(n - 1) + fib(n - 2);
	}
}

s64 fib2(void)
{
	return fib(40);
}

s64 fib3(s64 n, s64 memory[])
{
	if (n < 2)
	{
		return n;
	} else if (memory[n] != 0) {
		return memory[n];
	} else {
		s64 x;
		x = 2;
		while (x <= n)
		{
			memory[x] = memory[x - 1] + memory[x - 2];
			x = x + 1;
		}
		// memory[n] = fib(n - 1) + fib(n - 2);
		return memory[n];
	}
}

s64 main(void)
{
	s64 x;
	s64 fibArray[64];
	
	x = 0;
	while (x++ < 64)
	{
		fibArray[x] = 0;
	}
	fibArray[1] = 1;
	x = 0;
	while (x++ < 1)
	{
		print(fib3(40, fibArray));
	}
	return 0;
}

//~ s64 minloc(s64 a[], s64 low, s64 high)
//~ {
	//~ s64 i; s64 x; s64 k; s64 j;
	//~ k = low;
	//~ x = a[low];
	//~ i = low + 1;
	//~ while (i < high)
	//~ {
		//~ j = a[i++];
		//~ if (j < x)
		//~ {
			//~ x = j;
			//~ k = i - 1;
		//~ }
	//~ }
	//~ return k;
//~ }

//~ void sort(s64 a[], s64 low, s64 high)
//~ {
	//~ s64 i; s64 k;
	//~ //i = low;
	//~ print(0);
	//~ print(a);
	//~ print(low);
	//~ print(high);
	//~ print(i);
	//~ print(0);
	//~ while(i < high - 1)
	//~ {
		//~ s64 t;
		//~ k = minloc(a, i, high);
		//~ print(k);
		//~ t = a[k];
		//~ a[k] = a[i];
		//~ a[i++] = t;
	//~ }
	//~ return;
//~ }

//~ s64 main(void)
//~ {
	//~ s64 i;
	//~ s64 x[10];
	//~ i = 0;
	//~ x[0] = 7;
	//~ x[1] = 5;
	//~ x[2] = 3;
	//~ x[3] = 9;
	//~ x[4] = 22;
	//~ x[5] = 76;
	//~ x[6] = 1;
	//~ x[7] = 88;
	//~ x[8] = 155;
	//~ x[9] = 12;
	
	//~ sort(x, 0, 10);
	//~ i = 0;
	//~ while(i < 10)
	//~ {
		//~ print(x[i++]);
	//~ }
	//~ return 0;
//~ }




//~ s64 gcd(s64 u, s64 v)
//~ {
	//~ if(v==0){
		//~ return u;
	//~ } else {
		//~ return gcd(v, u-u/v*v);

	//~ }
//~ }

//~ s64 main(void)
//~ {
	//~ s64 x;
	//~ s64 y;
	//~ s64 z;
	//~ x = 25;
	//~ y = 15;
	//~ z = gcd(y,x);
	//~ print(z);
	//~ return 0;
//~ }

//~ s64 tri(s64 x)
//~ {
	//~ return x * 3; //54
//~ }

//~ s64 main(void)
//~ {
	//~ s64 value;
	//~ s64 array[10];
	//~ s64 index;// 6
	//~ value = 20; // 10
	//~ print(value); // 13
	//~ if (value > 10) // 21
	//~ {
		//~ value = tri(value)+5;//36
		//~ if (value == 65) //8
		//~ {
			//~ value = value >> 1; //15
		//~ }
	//~ } else {
		//~ value = tri(value);//45
	//~ }
	//~ print(value);
	
	//~ array[0] = 10;
	//~ array[1] = 1;
	//~ array[1] = 1;
	//~ array[2] = 2;
	//~ array[3] = 3;
	//~ array[4] = 4;
	//~ array[5] = 5;
	//~ array[6] = 6;
	//~ array[7] = 450;
	//~ array[8] = 8;
	//~ array[9] = 9;
	//~ index = 0;
	//~ while (index < 10)
	//~ {
		//~ print(array[index]);
		//~ index = index + 1;
	//~ }
	//~ return value;//48
//~ }

//~ s64 double( s64 x, s64 y)
//~ {
	//~ s64 bob;
	//~ s64 x;
	//~ s64 array[20];
	
	//~ bob = 5;
	//~ x = x + bob + tri(sally) * array[3];
	//~ if (x > 64)
	//~ {
		//~ s64 bob;
		//~ s64 x;
		//~ bob = 5 + 5;
		//~ return array[2];
	//~ }
	//~ y = bob + 654;
	//~ if (y > 555)
	//~ {
		//~ s64 zx;
		//~ s64 xy;
		//~ zx = 5 + 5;
		//~ xy = zx * 2;
		//~ bob = xy + 9;
	//~ }
	//~ // return x * y;
	//~ return bob;
//~ }

//~ s64 sally;

//~ void breakIt(s64 x)
//~ {
	//~ s64 sally;
	//~ s64 x;
	//~ s64 slice[32];
	//~ s64 fig[33];
	//~ fig = slice;
	//~ sally = double(sally, x);
//~ }

//~ s64 maxPain[5*5/10+5];

//~ s64 global;

//~ void main(void)
//~ {
	//~ return 1;
//~ }
